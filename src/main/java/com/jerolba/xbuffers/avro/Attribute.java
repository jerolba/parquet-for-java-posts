/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jerolba.xbuffers.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Attribute extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6860337588420052165L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Attribute\",\"namespace\":\"com.jerolba.xbuffers.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"size\",\"type\":\"int\"},{\"name\":\"percent\",\"type\":\"double\"},{\"name\":\"active\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Attribute> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Attribute> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Attribute> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Attribute> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Attribute> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Attribute to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Attribute from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Attribute instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Attribute fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence id;
  private int quantity;
  private int amount;
  private int size;
  private double percent;
  private boolean active;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Attribute() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param quantity The new value for quantity
   * @param amount The new value for amount
   * @param size The new value for size
   * @param percent The new value for percent
   * @param active The new value for active
   */
  public Attribute(java.lang.CharSequence id, java.lang.Integer quantity, java.lang.Integer amount, java.lang.Integer size, java.lang.Double percent, java.lang.Boolean active) {
    this.id = id;
    this.quantity = quantity;
    this.amount = amount;
    this.size = size;
    this.percent = percent;
    this.active = active;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return quantity;
    case 2: return amount;
    case 3: return size;
    case 4: return percent;
    case 5: return active;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: quantity = (java.lang.Integer)value$; break;
    case 2: amount = (java.lang.Integer)value$; break;
    case 3: size = (java.lang.Integer)value$; break;
    case 4: percent = (java.lang.Double)value$; break;
    case 5: active = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public int getAmount() {
    return amount;
  }


  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(int value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'size' field.
   * @return The value of the 'size' field.
   */
  public int getSize() {
    return size;
  }


  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(int value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'percent' field.
   * @return The value of the 'percent' field.
   */
  public double getPercent() {
    return percent;
  }


  /**
   * Sets the value of the 'percent' field.
   * @param value the value to set.
   */
  public void setPercent(double value) {
    this.percent = value;
  }

  /**
   * Gets the value of the 'active' field.
   * @return The value of the 'active' field.
   */
  public boolean getActive() {
    return active;
  }


  /**
   * Sets the value of the 'active' field.
   * @param value the value to set.
   */
  public void setActive(boolean value) {
    this.active = value;
  }

  /**
   * Creates a new Attribute RecordBuilder.
   * @return A new Attribute RecordBuilder
   */
  public static com.jerolba.xbuffers.avro.Attribute.Builder newBuilder() {
    return new com.jerolba.xbuffers.avro.Attribute.Builder();
  }

  /**
   * Creates a new Attribute RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Attribute RecordBuilder
   */
  public static com.jerolba.xbuffers.avro.Attribute.Builder newBuilder(com.jerolba.xbuffers.avro.Attribute.Builder other) {
    if (other == null) {
      return new com.jerolba.xbuffers.avro.Attribute.Builder();
    } else {
      return new com.jerolba.xbuffers.avro.Attribute.Builder(other);
    }
  }

  /**
   * Creates a new Attribute RecordBuilder by copying an existing Attribute instance.
   * @param other The existing instance to copy.
   * @return A new Attribute RecordBuilder
   */
  public static com.jerolba.xbuffers.avro.Attribute.Builder newBuilder(com.jerolba.xbuffers.avro.Attribute other) {
    if (other == null) {
      return new com.jerolba.xbuffers.avro.Attribute.Builder();
    } else {
      return new com.jerolba.xbuffers.avro.Attribute.Builder(other);
    }
  }

  /**
   * RecordBuilder for Attribute instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Attribute>
    implements org.apache.avro.data.RecordBuilder<Attribute> {

    private java.lang.CharSequence id;
    private int quantity;
    private int amount;
    private int size;
    private double percent;
    private boolean active;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jerolba.xbuffers.avro.Attribute.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.size)) {
        this.size = data().deepCopy(fields()[3].schema(), other.size);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.percent)) {
        this.percent = data().deepCopy(fields()[4].schema(), other.percent);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.active)) {
        this.active = data().deepCopy(fields()[5].schema(), other.active);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Attribute instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jerolba.xbuffers.avro.Attribute other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantity)) {
        this.quantity = data().deepCopy(fields()[1].schema(), other.quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.size)) {
        this.size = data().deepCopy(fields()[3].schema(), other.size);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.percent)) {
        this.percent = data().deepCopy(fields()[4].schema(), other.percent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.active)) {
        this.active = data().deepCopy(fields()[5].schema(), other.active);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder setQuantity(int value) {
      validate(fields()[1], value);
      this.quantity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder clearQuantity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public int getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder setAmount(int value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'size' field.
      * @return The value.
      */
    public int getSize() {
      return size;
    }


    /**
      * Sets the value of the 'size' field.
      * @param value The value of 'size'.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder setSize(int value) {
      validate(fields()[3], value);
      this.size = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'size' field.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder clearSize() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'percent' field.
      * @return The value.
      */
    public double getPercent() {
      return percent;
    }


    /**
      * Sets the value of the 'percent' field.
      * @param value The value of 'percent'.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder setPercent(double value) {
      validate(fields()[4], value);
      this.percent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'percent' field has been set.
      * @return True if the 'percent' field has been set, false otherwise.
      */
    public boolean hasPercent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'percent' field.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder clearPercent() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'active' field.
      * @return The value.
      */
    public boolean getActive() {
      return active;
    }


    /**
      * Sets the value of the 'active' field.
      * @param value The value of 'active'.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder setActive(boolean value) {
      validate(fields()[5], value);
      this.active = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'active' field has been set.
      * @return True if the 'active' field has been set, false otherwise.
      */
    public boolean hasActive() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'active' field.
      * @return This builder.
      */
    public com.jerolba.xbuffers.avro.Attribute.Builder clearActive() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Attribute build() {
      try {
        Attribute record = new Attribute();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.quantity = fieldSetFlags()[1] ? this.quantity : (java.lang.Integer) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Integer) defaultValue(fields()[2]);
        record.size = fieldSetFlags()[3] ? this.size : (java.lang.Integer) defaultValue(fields()[3]);
        record.percent = fieldSetFlags()[4] ? this.percent : (java.lang.Double) defaultValue(fields()[4]);
        record.active = fieldSetFlags()[5] ? this.active : (java.lang.Boolean) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Attribute>
    WRITER$ = (org.apache.avro.io.DatumWriter<Attribute>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Attribute>
    READER$ = (org.apache.avro.io.DatumReader<Attribute>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeInt(this.quantity);

    out.writeInt(this.amount);

    out.writeInt(this.size);

    out.writeDouble(this.percent);

    out.writeBoolean(this.active);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.quantity = in.readInt();

      this.amount = in.readInt();

      this.size = in.readInt();

      this.percent = in.readDouble();

      this.active = in.readBoolean();

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.quantity = in.readInt();
          break;

        case 2:
          this.amount = in.readInt();
          break;

        case 3:
          this.size = in.readInt();
          break;

        case 4:
          this.percent = in.readDouble();
          break;

        case 5:
          this.active = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










